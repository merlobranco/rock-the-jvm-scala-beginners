package lectures.part2oop

object CaseClasses extends App {

  /*
    In order to avoid the boilerplate code generated by these methods:

      equals, hashCode, toString

     CASE CLASSES:

      An ideal solution to this problem, case classes are exceptionally useful shorthand for defining a class and a companion object
      and a lot sensible defaults in one go.
      They are really perfect for creating this kind of lightweight data holding classes, with really minimum hassle
   */

  case class Person(name: String, age: Int)

  // 1. class parameters are fields
  val jim = new Person("Jim", 34)
  println(jim.name)

  // 2. sensible toString
  println(jim)

  // 3. Equals and hashCode implemented out of the box
  val jim2 = new Person("Jim", 34)
  println(jim == jim2)

  // 4. Case classes have a handy copy method
  val jim3 = jim.copy(age = 45)
  println(jim3)

  // 5. Case classes have companion objects
  val thePerson = Person
  // We could call the apply method of the companion object in order to construct (create and instance),
  // So we don't really use keyword 'new' for instantiating a case class
  val mary = Person("Mary", 23)

  // 6. Case classes are serializable, that makes them highly useful in distributed systems
  // We could send case classes through the network and in between JVM
  // AKKA

  // 7. Case classed have extractor patterns = Case Classes can be used in PATTERN MATCHING

  // 8. We have case objects
  // They don't have companion objects because they are they own companion objects
  case object UnitedKingdom {
    def name: String = "The UK of GB and NI"
  }

  /*
    Expand MyList - Use case classes and case objects
   */
}
